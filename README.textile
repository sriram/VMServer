h1. A gem to simplify interaction with VMServer.

Let's see how to configure and use the gem.
Place all your configuartion in the initialize block.
Now interacting with VMServer should be a piece of cake :)


bc. vmserver = VMServer.new do |vm|
  vm.host             = 'https://xx.xx.xx.xx:8333/sdk'
  vm.vm_user          = 'root'
  vm.vm_password      = 'xxxxxxxx'
  vm.guest_password   = 'xxxxxxxxxx'
  vm.guest_user       = 'administrator'
  vm.datastore        = '[standard] img/img.vmx'
  vm.logging_enabled  = true
end


*To start the VMServer*

bc. vmserver.start

*To stop the VMServer*

bc. vmserver.stop

*You can also do a hard stop which is equivalent of plugging of the syetem physically*
bc. vmserver.stop('hard')

*To create a directory in the Guest OS*

bc. vmserver.mkdir('dir')

*Example*

bc. vmserver.mkdir('c:\test folder\vm server')

*To copy a file from Host OS to Guest OS*

bc. vmserver.copy_file_from_host_to_guest('src','dest')

*_Note_* The src and dest need to be absolute paths.

*To list the files under a directory*

bc. vmserver.ls('dir')

_This will return an array of files_

*To remove a directory in the Guest OS*

bc. vmserver.rmdir('dir')

*To remove a file in the Guest OS*

bc. vmserver.rmfile('file')

*Example*

bc. vmserver.rmdir('c:\exampledir')

*To run a program in the guest OS*

bc. vmserver.run_program_in_guest('path_to_prog',:prog_args => 'if any')

*To list processes in guest*

bc. vmserver.get_processes_in_guest

_This will return an array of processes along with their PIDs_

*To kill a process in guest*

bc. vmserver.kill_process_in_guest('pid')

*To take a snapshot of the guest OS*

bc. vmserver.capture_screen('path_to_output_file_on_host')









